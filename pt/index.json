[{"content":"A Perspetiva de um Developer .NET Crescido no Mundo Microsoft Durante décadas o mundo do desenvolvimento europeu cresceu sob a mesma bandeira. Escolas, universidades e centros de formação ensinaram programação em ambientes Windows. Servidores públicos e sistemas governamentais foram construídos em cima do stack Microsoft. E as empresas seguiram o mesmo caminho porque era a opção mais natural e aparentemente segura.\nPara muitos de nós a história começou no Visual Studio. O primeiro \u0026ldquo;Hello World\u0026rdquo; correu num Windows XP e a primeira aplicação de produção foi publicada num IIS dentro da rede da empresa. Este percurso não foi exceção, foi a norma. O ecossistema Microsoft criou as condições perfeitas para nos manter ali. A formação estava alinhada, o mercado pedia essas competências e a curva de entrada era suave.\nCom a chegada do fim do Windows 10 algo começou a mudar. Governos e organizações públicas europeias começaram a repensar a dependência de soluções proprietárias. Iniciativas como goeuropean e european-alternatives nasceram precisamente com esse objetivo: reduzir a dependência tecnológica de fornecedores únicos e apostar em soluções open source. De repente a conversa sobre liberdade deixou de ser teórica e passou a ser estratégica.\nO Conforto da Prisão Dourada Para quem sempre viveu dentro do ecossistema Microsoft tudo parecia natural. Visual Studio funcionava sem esforço e a produtividade era quase instantânea. IIS e Windows Server eram sinónimos de estabilidade e o ciclo de desenvolvimento era tão fluido que mal nos apercebíamos da prisão em que estávamos.\nO preço dessa conveniência era invisível. O código não respirava fora daquele casulo e cada passo fora do ambiente oficial parecia uma aventura perigosa. Dependíamos de ferramentas proprietárias, de licenças caras e de uma forma de pensar que se confundia com a própria plataforma.\nA Microsoft construiu um império à custa desta dependência. Criou ferramentas tão integradas e polidas que a ideia de procurar alternativas parecia desnecessária. E muitos de nós aceitaram esse contrato sem questionar.\nO Circo do Windows e a Ditadura dos Clicks O Windows sempre foi a porta de entrada para o mundo Microsoft e também a sua armadilha mais eficaz. A experiência inicial é sedutora. Dois cliques e o projeto está a correr. O sistema trata de tudo por nós e o ambiente parece feito à medida do developer. Mas essa conveniência tem um preço elevado.\nAs decisões controversas acumulam-se\nAs contas locais desapareceram. Agora é obrigatório usar uma conta Microsoft para iniciar sessão. O consumo de RAM disparou. Uma instalação limpa consome vários gigabytes sem correr nada de relevante. As atualizações obrigatórias transformam a produtividade em sorte. Um reboot inesperado no meio de um deployment deixou de ser acidente e passou a ser feature. O Game Pass aumentou de preço e é apresentado como benefício. Estes problemas são apenas a ponta do iceberg. O Windows está carregado de telemetria que recolhe dados de forma constante e muitas vezes invisível. Mesmo com todas as opções de privacidade desativadas há serviços que continuam a comunicar em segundo plano.\nO sistema vem cheio de aplicações pré-instaladas que ninguém pediu. Widgets, promoções e software redundante ocupam espaço e consomem recursos. Em muitas empresas o primeiro passo após a instalação é limpar o sistema antes de começar a trabalhar.\nA interface é um caos. Configurações estão divididas entre a aplicação moderna e o velho Painel de Controlo. Tarefas simples exigem múltiplos cliques e menus escondidos. A coerência deu lugar a um UX que parece feito para confundir.\nE mesmo quando tentamos exercer escolha, o sistema impõe-se. O Microsoft Edge abre links internos mesmo quando outro browser está definido por defeito. Não é preferência, é imposição.\nA versão 25H2 do Windows 11 empurrou a situação para o absurdo. O localhost passou a comportar-se de forma errática e o desenvolvimento local deixou de ser fiável.\nE quanto ao velho companheiro Windows 10? Esse já foi oficialmente abandonado. A Microsoft não o matou de um dia para o outro, escolheu a crueldade lenta. Deixou-o a definhar no canto enquanto anuncia que, a partir de agora, a segurança tem mensalidade. Se quiseres continuar a usá-lo em produção depois do fim do suporte em outubro de 2025, prepara a carteira. O que antes era um sistema operativo de trabalho transformou-se num produto por subscrição, e a mensagem é clara: ou migras para o Windows 11 ou pagas para continuar a ter atualizações.\nO Teatrinho do Open Source Durante muito tempo a Microsoft tratou o open source com desdém. Steve Ballmer chegou a chamar ao Linux um cancro. Depois o mercado mudou e o discurso mudou com ele. Hoje a empresa proclama amor ao open source mas as ações contam outra história.\nA comunidade criou ferramentas essenciais para o ecossistema .NET. Containers de injeção de dependências, frameworks de UI e soluções de messaging nasceram do esforço coletivo. Em vez de apoiar esses projetos a Microsoft decidiu reescrevê-los.\nO Autofac era um container maduro e amplamente usado. A empresa criou o seu próprio. Uno Platform e Avalonia eram soluções UI sólidas. A empresa lançou o .NET MAUI e promoveu-o como padrão. O resultado é que muitos projetos comunitários começaram a mudar de licença. MassTransit, FluentAssertions e MediatR adotaram modelos comerciais não por ganância mas porque foram explorados durante anos por gigantes sem retorno.\nO Walled Garden Azul O conceito de Walled Garden descreve perfeitamente a abordagem moderna da Microsoft. Tudo funciona com uma fluidez impressionante desde que se permaneça dentro das muralhas. Visual Studio integra-se automaticamente com o Azure DevOps. Ferramentas como Key Vault ou Service Bus exigem zero configuração.\nMas essa comodidade cria dependência. Aplicações que usam serviços Azure tornam-se difíceis de migrar. O processo não é uma simples mudança de fornecedor. É uma reescrita estrutural que pode levar meses e exigir uma equipa inteira.\nA realidade é que .NET funciona em self-host, AWS ou GCP. No entanto, a documentação oficial, os exemplos e a interface das ferramentas guiam-nos consistentemente para o Azure. É um empurrão subtil mas constante.\nA Grande Fuga para o Mundo Livre Perante tudo isto muitos developers decidiram saltar a cerca. A escolha natural foi o Linux. E entre as várias opções, Arch Linux surgiu como o símbolo máximo de controlo e liberdade.\nA mudança foi libertadora e dolorosa ao mesmo tempo. Sem a conveniência do ecossistema Microsoft tudo passou a exigir mais atenção. Configurar ambientes deixou de ser automático e passou a ser artesanal. Debuggers que funcionavam com um clique pediam agora ajustes manuais.\nO que antes era plug and play tornou-se uma sequência de decisões e configurações conscientes. Nada acontecia sozinho. A liberdade existia mas obrigava-nos a assumir responsabilidades que tínhamos esquecido.\nEsta experiência revelou a verdade incómoda. O que a Microsoft oferece não é apenas tecnologia. É dependência embrulhada em conforto.\nA Liberdade com Rodinhas Não há dúvida de que .NET é uma plataforma tecnicamente poderosa. C# é elegante, a performance é de topo e a comunidade é vibrante. Mas toda essa excelência vem acompanhada de condições.\nA liberdade de escolha existe no papel mas está cercada pela conveniência. Enquanto aceitarmos as regras do Walled Garden tudo funciona perfeitamente. Quando decidimos sair, descobrimos o preço da independência.\nO open source que a Microsoft defende tem a profundidade de uma estratégia de marketing. O código pode estar disponível mas a estrutura que o rodeia continua a servir os interesses da empresa.\nConclusão A Prisão Confortável O ecossistema Microsoft permanece um dos mais poderosos do mundo do desenvolvimento. Mas também continua a ser um dos mais controladores. O Walled Garden é confortável e eficiente mas é também um lembrete de que cada escolha tem um custo.\nA empresa aprendeu que abrir o código era vantajoso para o negócio. Não no espírito do open source mas como forma de atrair developers e manter a dependência através da infraestrutura.\nO abandono do Windows 10 é o exemplo perfeito dessa estratégia. Em vez de manter uma base estável e acessível, a Microsoft escolheu empurrar milhões de utilizadores para o Windows 11. Não o fez por necessidade técnica, fez porque é assim que se vende o próximo produto. É obsolescência planeada com verniz corporativo e o recado é simples: quem quiser segurança vai ter de pagar.\nPodemos correr .NET em qualquer lado. Podemos evitar o Azure. Podemos construir soluções totalmente independentes. Mas a experiência oficial guia-nos sempre na mesma direção.\nChama-lhe liberdade se quiseres. Para muitos de nós é liberdade com rodinhas. Confortável e previsível mas com a Microsoft a segurar o guiador. E enquanto aceitarmos isso o ar continuará a ser pago e o código continuará a ter dono.\n","permalink":"https://pwuexec.com/pt/posts/dotnet-walled-garden/","summary":"\u003ch2 id=\"a-perspetiva-de-um-developer-net-crescido-no-mundo-microsoft\"\u003eA Perspetiva de um Developer .NET Crescido no Mundo Microsoft\u003c/h2\u003e\n\u003cp\u003eDurante décadas o mundo do desenvolvimento europeu cresceu sob a mesma bandeira. Escolas, universidades e centros de formação ensinaram programação em ambientes Windows. Servidores públicos e sistemas governamentais foram construídos em cima do stack Microsoft. E as empresas seguiram o mesmo caminho porque era a opção mais natural e aparentemente segura.\u003cbr\u003e\nPara muitos de nós a história começou no Visual Studio. O primeiro \u0026ldquo;Hello World\u0026rdquo; correu num Windows XP e a primeira aplicação de produção foi publicada num IIS dentro da rede da empresa. Este percurso não foi exceção, foi a norma. O ecossistema Microsoft criou as condições perfeitas para nos manter ali. A formação estava alinhada, o mercado pedia essas competências e a curva de entrada era suave.\u003cbr\u003e\nCom a chegada do fim do Windows 10 algo começou a mudar. Governos e organizações públicas europeias começaram a repensar a dependência de soluções proprietárias. Iniciativas como \u003cstrong\u003egoeuropean\u003c/strong\u003e e \u003cstrong\u003eeuropean-alternatives\u003c/strong\u003e nasceram precisamente com esse objetivo: reduzir a dependência tecnológica de fornecedores únicos e apostar em soluções open source. De repente a conversa sobre liberdade deixou de ser teórica e passou a ser estratégica.\u003c/p\u003e","title":"Do Visual Studio ao Walled Garden A Jornada de um Developer .NET na Era do Open Source"},{"content":"A Nova Droga da Programação Que Está a Matar Engenheiros Este texto contém doses perigosas de ironia, provocações que podem ferir egos frágeis e verdades que nem o Copilot consegue corrigir. Se alguma vez disseste “o prompt não funcionou, deve ser culpa do modelo”, continua a ler — és o paciente perfeito para esta reabilitação.\nLembras-te de quando programar exigia pensar? Quando resolver um problema implicava abrir o caderno, desenhar caixas e setas, discutir soluções com a equipa e planear cada passo? Pois… isso era antes da era das LLMs.\nHoje, o ritual é outro: abres o ChatGPT, escreves “faz-me um CRUD com testes e clean arch…” e lá está. Código pronto, ego inflado, dopamina no teto.\nÉ a mesma sensação de abrir o Instagram “só por um segundo” e perceber três horas depois que sabes tudo sobre a vida de um influencer que nem segues. Só que aqui a droga chama-se Dopamine Coding — barato, rápido, legal e altamente viciante. O problema? O crash vem no deploy.\nO primeiro “pico” ninguém esquece A primeira dose é sempre especial. Estás farto de escrever as mesmas funções e decides experimentar IA. Abres um chat, escreves umas linhas, carregas em Enter e de repente tens centenas de linhas de código elegante, testes incluídos e variáveis com nomes mais criativos do que muitos copywriters.\nO teu cérebro liberta dopamina em níveis que nem o TikTok consegue igualar. Sentes-te dez vezes mais produtivo. Convences-te de que atingiste o estado de “engenheiro iluminado”.\nE até acreditas que, se alguém te perguntasse numa entrevista “como isso funciona?”, terias resposta. (Spoiler: não terias. E se tiveres, provavelmente está errada.)\nA ressaca bate mais rápido do que um build falhado O paraíso dura até à primeira bad trip:\nO código não escala. A lógica de negócio está invertida. O endpoint responde mais devagar do que tu numa reunião de sexta-feira à tarde. E agora? Ficas parado, a olhar para o ecrã, com a mesma energia de quem terminou uma maratona de scroll no Reels: não sabes o que aconteceu, não sabes porque estás ali e definitivamente não sabes o que fazer a seguir.\nComo qualquer bom viciado, entras em negação:\n“Deve ser o modelo.” “Talvez seja a stack…” “Deve ser a IDE.” “A empresa devia era pagar o Copilot.” “E se experimentar outro?” E lá vais tu abrir novas abas: Claude, ChatGPT, Gemini. Qual vai dar a moca mais forte desta vez?\nE se adicionares MCPs à mistura… parabéns, estás no crack da programação. Convences-te de que agora vai correr tudo bem e no fim continuas no mesmo sítio: sem solução e com menos neurónios a funcionar.\nQuando a IA estraga mais do que ajuda O problema não é a ferramenta. O problema é aquilo que deixas de fazer quando a tens: pensar.\nE aqui começam os verdadeiros estragos:\nArquiteturas desastrosas: a IA sugere padrões que fazem sentido… no universo paralelo onde ela vive. Negócios incompreendidos: o código resolve um “como” que nunca devia ter sido resolvido. Bugs invisíveis: o código funciona, mas ninguém sabe porquê. Testes inúteis: a cobertura está a 100%, mas não cobre cenários reais. Overengineering: usas ferramentas que nunca tinhas ouvido falar — e ninguém vai conseguir manter — só porque a IA disse que eram “melhores”. E o final boss? Quando os testes automáticos passam todos, mas o produto rebenta em produção. A cobertura está impecável — e o teu sistema também, desde que nunca seja usado por humanos reais.\nO verdadeiro trabalho de um engenheiro: entender o problema Aqui está a parte que a dopamina te faz esquecer: engenharia não é escrever código. É resolver problemas. E resolver problemas começa por os entender.\nPerceber o “negócio” não significa decorar requisitos ou saber os KPI do trimestre. Significa perceber o que estás a tentar resolver, porquê, para quem e com que impacto. É compreender o contexto, as restrições, as prioridades e a dor real que está por trás do pedido.\nSem isso, estás a fazer engenharia às cegas — e o código que a IA gera é só uma resposta bonita a uma pergunta mal feita.\nMas quando sabes o que queres resolver, a história muda completamente. Consegues fazer perguntas melhores. Consegues avaliar soluções com mais clareza. E, de repente, a IA deixa de ser uma muleta e passa a ser um turbo.\nUsada neste contexto, a IA é como cafeína de alta qualidade: mantém-te focado e acelera o raciocínio, mas não pensa por ti. Se só a usas para “ver se cola”, estás mais perto do açúcar barato do que da inteligência artificial.\nUtilizo IA para resolver o que não merece o meu cérebro Apesar de tudo isto, continuo a usar IA todos os dias. A diferença é que não a trato como um deus do código, mas sim como um estagiário hiperativo: escreve rápido, não precisa de férias e faz tarefas que não merecem um segundo do meu córtex pré-frontal.\nExemplos concretos:\nTDD mais eficiente: eu defino os cenários e a IA trata da parte GREEN e REFACTOR (às vezes). Scripts auxiliares: migração de dados, transformações pontuais, tarefas repetitivas. DevOps sem dores: comandos complexos no terminal ou pipelines de CI/CD que não quero decorar. Exploração de código legado: para entender rapidamente partes obscuras de sistemas antigos. Aprendizagem técnica: rever conceitos como concorrência em Go ou protocolos HTTP mais recentes. A regra é simples: eu penso, a IA executa. Nunca o contrário.\nA linha entre engenheiro e operador de prompts Se continuarmos a usar IA como substituto do raciocínio, daqui a uns anos não haverá engenheiros. Haverá apenas operadores de prompts a competir para ver quem escreve o “prompt mágico” mais depressa — como ratinhos de laboratório a carregar no botão da dopamina à espera de outra dose.\nA verdade é simples:\nA IA pode escrever código, mas não entende o problema. Pode sugerir soluções, mas não percebe os trade-offs. Pode construir funcionalidades, mas não sabe porquê. O cérebro humano ainda é a tecnologia mais poderosa que existe. E se o deixares enferrujar, nenhuma LLM vai substituí-lo.\nConclusão – A moral do vício digital Programar com IA é como açúcar refinado: doce no início, viciante no meio e cheio de efeitos colaterais no fim. No início, tudo parece produtividade e euforia. Depois chegam as desculpas (“deve ser o modelo”, “devia mudar de stack”, “a empresa devia pagar o Copilot”). E, quando dás por ti, passaste mais tempo a afinar prompts do que a resolver problemas.\nA moral?\nPensa primeiro, pede ajuda depois. Faz perguntas melhores, em vez de prompts maiores. Se a IA for a droga, que o teu cérebro seja o traficante. E nunca te esqueças: quem entende profundamente o problema nunca será substituído por quem apenas escreve código. Porque engenheiros resolvem problemas reais com impacto real. O resto só recarrega tokens e chama a isso trabalho.\nEm resumo: a IA não te torna menos engenheiro. Tu é que te tornas, se a deixares pensar por ti. Usa-a como aliada para explorar soluções e acelerar ideias, mas lembra-te de que o verdadeiro diferencial está em perceber o que precisa de ser resolvido e porquê. Essa clareza é a diferença entre quem cria valor e quem só gera linhas de código — e entre quem está a conduzir o futuro e quem está apenas a carregar no botão da dopamina.\n","permalink":"https://pwuexec.com/pt/posts/ai-e-programadores/","summary":"\u003ch1 id=\"a-nova-droga-da-programação-que-está-a-matar-engenheiros\"\u003eA Nova Droga da Programação Que Está a Matar Engenheiros\u003c/h1\u003e\n\u003cp\u003eEste texto contém doses perigosas de ironia, provocações que podem ferir egos frágeis e verdades que nem o Copilot consegue corrigir. Se alguma vez disseste “o prompt não funcionou, deve ser culpa do modelo”, continua a ler — és o paciente perfeito para esta reabilitação.\u003c/p\u003e\n\u003cp\u003eLembras-te de quando programar exigia pensar? Quando resolver um problema implicava abrir o caderno, desenhar caixas e setas, discutir soluções com a equipa e planear cada passo? Pois… isso era antes da era das LLMs.\u003c/p\u003e","title":"Como a IA Está a Tornar os Programadores Mais Preguiçosos e Menos Engenheiros"}]