[{"content":"A Nova Droga da Programação Que Está a Matar Engenheiros 💊 Este texto contém níveis perigosos de ironia, provocações que podem ferir egos frágeis e verdades que nem o Copilot consegue auto-corrigir. Se já disseste “o prompt não funcionou, deve ser culpa do modelo”, lê por tua conta e risco. Lembras-te quando programar exigia pensar? Quando resolver um problema significava abrir o caderno, desenhar caixas e setas, discutir com a equipa e planear soluções? Pois… isso foi antes da era das LLMs.\nHoje o ritual é mais simples: abrir o ChatGPT, mandar um “faz-me um CRUD com testes e arquitetura limpa” e voilà. Código pronto, ego inflado, dopamina no teto.\nBem-vindo ao Dopamine Coding™, também conhecido como a cocaína digital do programador moderno. Barato, rápido, acessível e legal. Mas, como qualquer droga, o vício cobra um preço — e normalmente a conta chega quando o código vai para produção.\nO primeiro “pico” ninguém esquece A primeira dose é mágica. Estás cansado de escrever sempre as mesmas funções e decides experimentar a IA. Abres um chat, digitas algumas linhas e Enter e BOOM: centenas de linhas de código elegante, testes incluídos e nomes de variáveis que até parecem ter sido escolhidos por um poeta sênior.\nO teu cérebro inunda-se de dopamina. Sentes-te 10x mais produtivo. Convences-te de que finalmente atingiste o estado de “engenheiro iluminado”.\nAté acreditas que, se alguém te perguntasse numa entrevista “como funciona isso?”, terias uma resposta. (Spoiler: não terias.)\nA ressaca bate mais rápido do que um build falhado O paraíso dura até à primeira bad trip:\nO código não escala. A lógica de negócio está invertida. O endpoint responde mais devagar do que um estagiário na sexta-feira à tarde. E tu não sabes por onde começar porque — surpresa — nunca pensaste no problema.\nAgora entras em modo desespero:\n“Deve ser o modelo.” “Talvez seja a stack…” “Deve ser a IDE.” “A empresa devia era pagar o Copilot ou o Cursor.” “E se experimentar outra?” E lá vais tu, abrir novas tabs, exprimentar outro model: Claude. ChatGPT. Gemini. Qual bate mais forte?\nE se adicionares MCPs à mistura… esquece. É a versão “premium” do vício. Convence-te de que agora vai correr tudo bem — e no fim continuas no mesmo sítio: sem solução e com menos neurónios a funcionar.\nQuando a IA estraga mais do que ajuda O problema não é a ferramenta. O problema é o que deixas de fazer quando a tens à disposição: pensar. E é aí que começam os verdadeiros estragos:\nArquiteturas desastrosas: a IA sugere padrões que até fazem sentido… no mundo dela. Negócios incompreendidos: o código resolve um “como” que nunca devia ter sido resolvido. Bugs invisíveis: o código funciona, mas ninguém sabe porquê. Testes inúteis: a cobertura está a 100%, mas não cobre cenários de negócio reais. Overengineering: achas-te muito esperto por usar merdas que nunca tinhas visto — e que provavelmente ninguém vai entender — só porque a IA diz que são mais rápidas. A cereja no topo? Quando os testes gerados automaticamente passam todos, e mesmo assim o produto falha em produção. A cobertura está impecável — e o teu sistema também, desde que nunca seja usado por um humano real.\nUtilizo IA para resolver o que não merece o meu cérebro Apesar de tudo isto, continuo a usar IA todos os dias. A diferença é que não a trato como uma solução milagrosa, mas sim como um estagiário hiperativo que escreve rápido e não precisa de férias.\nEis alguns exemplos concretos de onde ela realmente me poupa tempo:\nTDD mais eficiente: eu defino os cenários e a IA trata da parte GREEN e REFACTOR (as vezes). Scripts auxiliares: migração de dados, transformações pontuais ou tarefas de manutenção. DevOps sem dores: comandos complexos no terminal ou pipelines de CI/CD que não quero decorar. Exploração de código legado: para entender rapidamente partes obscuras de sistemas antigos. Aprendizagem técnica: rever conceitos como concorrência em Go ou protocolos HTTP mais recentes. A regra é simples: eu penso, a IA executa. Nunca o contrário.\nA linha entre engenheiro e operador de prompts Se continuarmos a usar IA como substituto do raciocínio, daqui a uns anos não haverá engenheiros — só operadores de prompts a competir para ver quem escreve “o prompt mágico” mais rápido.\nA verdade é que a IA pode escrever código, mas não entende o negócio. Pode sugerir soluções, mas não percebe os trade-offs. Pode construir funcionalidades, mas não sabe porquê.\nO cérebro humano ainda é a melhor tecnologia que temos. E se o deixares enferrujar, nenhuma LLM o vai substituir.\nConclusão – A moral do vício digital A programação com IA é como um pacote de açúcar: doce no início, viciante no meio e com efeitos colaterais no fim. No início é tudo produtividade e euforia. Depois vêm as desculpas (“deve ser o modelo”, “devia mudar de stack”, “a empresa devia pagar o Copilot”). E, quando dás por ti, passaste mais tempo a afinar prompts do que a resolver problemas.\nA moral?\n👉 Pensa primeiro, pede ajuda depois. 👉 Faz perguntas melhores, em vez de prompts maiores. 👉 E se a IA for a droga… que o teu cérebro seja o traficante. Porque engenheiros resolvem problemas. O resto só recarrega tokens.\n","permalink":"http://localhost:1313/pt/posts/ai-e-programadores/","summary":"\u003ch1 id=\"a-nova-droga-da-programação-que-está-a-matar-engenheiros\"\u003eA Nova Droga da Programação Que Está a Matar Engenheiros\u003c/h1\u003e\n\u003ch2 id=\"-este-texto-contém-níveis-perigosos-de-ironia-provocações-que-podem-ferir-egos-frágeis-e-verdades-que-nem-o-copilot-consegue-auto-corrigir-se-já-disseste-o-prompt-não-funcionou-deve-ser-culpa-do-modelo-lê-por-tua-conta-e-risco\"\u003e💊 Este texto contém níveis perigosos de ironia, provocações que podem ferir egos frágeis e verdades que nem o Copilot consegue auto-corrigir. Se já disseste “o prompt não funcionou, deve ser culpa do modelo”, lê por tua conta e risco.\u003c/h2\u003e\n\u003cp\u003eLembras-te quando programar exigia pensar? Quando resolver um problema significava abrir o caderno, desenhar caixas e setas, discutir com a equipa e planear soluções? Pois… isso foi antes da era das LLMs.\u003c/p\u003e","title":"Como a IA Está a Tornar os Programadores Mais Preguiçosos e Menos Engenheiros"},{"content":"A Nova Droga da Programação Que Está a Matar Engenheiros \u0026ndash; 💊 Este texto contém níveis perigosos de ironia, provocações que podem ferir egos frágeis e verdades que nem o Copilot consegue auto-corrigir. Se já disseste “o prompt não funcionou, deve ser culpa do modelo”, lê por tua conta e risco. Lembras-te quando programar exigia pensar? Quando resolver um problema significava abrir o caderno, desenhar caixas e setas, discutir com a equipa e planear soluções? Pois… isso foi antes da era das LLMs.\nHoje o ritual é mais simples: abrir o ChatGPT, mandar um “faz-me um CRUD com testes e arquitetura limpa” e voilà. Código pronto, ego inflado, dopamina no teto.\nBem-vindo ao Dopamine Coding™, também conhecido como a cocaína digital do programador moderno. Barato, rápido, acessível e legal. Mas, como qualquer droga, o vício cobra um preço — e normalmente a conta chega quando o código vai para produção.\nO primeiro “pico” ninguém esquece A primeira dose é mágica. Estás cansado de escrever sempre as mesmas funções e decides experimentar a IA. Abres um chat, digitas algumas linhas e Enter e BOOM: centenas de linhas de código elegante, testes incluídos e nomes de variáveis que até parecem ter sido escolhidos por um poeta sênior.\nO teu cérebro inunda-se de dopamina. Sentes-te 10x mais produtivo. Convences-te de que finalmente atingiste o estado de “engenheiro iluminado”.\nAté acreditas que, se alguém te perguntasse numa entrevista “como funciona isso?”, terias uma resposta. (Spoiler: não terias.)\nA ressaca bate mais rápido do que um build falhado O paraíso dura até à primeira bad trip:\nO código não escala. A lógica de negócio está invertida. O endpoint responde mais devagar do que um estagiário na sexta-feira à tarde. E tu não sabes por onde começar porque — surpresa — nunca pensaste no problema.\nAgora entras em modo desespero:\n“Deve ser o modelo.” “Talvez seja a stack…” “Deve ser a IDE.” “A empresa devia era pagar o Copilot ou o Cursor.” “E se experimentar outra?” E lá vais tu, abrir novas tabs, exprimentar outro model: Claude. ChatGPT. Gemini. Qual bate mais forte?\nE se adicionares MCPs à mistura… esquece. É a versão “premium” do vício. Convence-te de que agora vai correr tudo bem — e no fim continuas no mesmo sítio: sem solução e com menos neurónios a funcionar.\nQuando a IA estraga mais do que ajuda O problema não é a ferramenta. O problema é o que deixas de fazer quando a tens à disposição: pensar. E é aí que começam os verdadeiros estragos:\nArquiteturas desastrosas: a IA sugere padrões que até fazem sentido… no mundo dela. Negócios incompreendidos: o código resolve um “como” que nunca devia ter sido resolvido. Bugs invisíveis: o código funciona, mas ninguém sabe porquê. Testes inúteis: a cobertura está a 100%, mas não cobre cenários de negócio reais. Overengineering: achas-te muito esperto por usar merdas que nunca tinhas visto — e que provavelmente ninguém vai entender — só porque a IA diz que são mais rápidas. A cereja no topo? Quando os testes gerados automaticamente passam todos, e mesmo assim o produto falha em produção. A cobertura está impecável — e o teu sistema também, desde que nunca seja usado por um humano real.\nUtilizo IA para resolver o que não merece o meu cérebro Apesar de tudo isto, continuo a usar IA todos os dias. A diferença é que não a trato como uma solução milagrosa, mas sim como um estagiário hiperativo que escreve rápido e não precisa de férias.\nEis alguns exemplos concretos de onde ela realmente me poupa tempo:\nTDD mais eficiente: eu defino os cenários e a IA trata da parte GREEN e REFACTOR (as vezes). Scripts auxiliares: migração de dados, transformações pontuais ou tarefas de manutenção. DevOps sem dores: comandos complexos no terminal ou pipelines de CI/CD que não quero decorar. Exploração de código legado: para entender rapidamente partes obscuras de sistemas antigos. Aprendizagem técnica: rever conceitos como concorrência em Go ou protocolos HTTP mais recentes. A regra é simples: eu penso, a IA executa. Nunca o contrário.\nA linha entre engenheiro e operador de prompts Se continuarmos a usar IA como substituto do raciocínio, daqui a uns anos não haverá engenheiros — só operadores de prompts a competir para ver quem escreve “o prompt mágico” mais rápido.\nA verdade é que a IA pode escrever código, mas não entende o negócio. Pode sugerir soluções, mas não percebe os trade-offs. Pode construir funcionalidades, mas não sabe porquê.\nO cérebro humano ainda é a melhor tecnologia que temos. E se o deixares enferrujar, nenhuma LLM o vai substituir.\nConclusão – A moral do vício digital A programação com IA é como um pacote de açúcar: doce no início, viciante no meio e com efeitos colaterais no fim. No início é tudo produtividade e euforia. Depois vêm as desculpas (“deve ser o modelo”, “devia mudar de stack”, “a empresa devia pagar o Copilot”). E, quando dás por ti, passaste mais tempo a afinar prompts do que a resolver problemas.\nA moral?\n👉 Pensa primeiro, pede ajuda depois. 👉 Faz perguntas melhores, em vez de prompts maiores. 👉 E se a IA for a droga… que o teu cérebro seja o traficante. Porque engenheiros resolvem problemas. O resto só recarrega tokens.\n","permalink":"http://localhost:1313/pt/posts/ai-e-programadores/","summary":"\u003ch1 id=\"a-nova-droga-da-programação-que-está-a-matar-engenheiros\"\u003eA Nova Droga da Programação Que Está a Matar Engenheiros\u003c/h1\u003e\n\u003ch2 id=\"-este-texto-contém-níveis-perigosos-de-ironia-provocações-que-podem-ferir-egos-frágeis-e-verdades-que-nem-o-copilot-consegue-auto-corrigir-se-já-disseste-o-prompt-não-funcionou-deve-ser-culpa-do-modelo-lê-por-tua-conta-e-risco\"\u003e\u0026ndash;\n💊 Este texto contém níveis perigosos de ironia, provocações que podem ferir egos frágeis e verdades que nem o Copilot consegue auto-corrigir. Se já disseste “o prompt não funcionou, deve ser culpa do modelo”, lê por tua conta e risco.\u003c/h2\u003e\n\u003cp\u003eLembras-te quando programar exigia pensar? Quando resolver um problema significava abrir o caderno, desenhar caixas e setas, discutir com a equipa e planear soluções? Pois… isso foi antes da era das LLMs.\u003c/p\u003e","title":"Como a IA Está a Tornar os Programadores Mais Preguiçosos e Menos Engenheiros"},{"content":"A Nova Droga da Programação Que Está a Matar Engenheiros 💊 Este texto contém níveis perigosos de ironia, provocações que podem ferir egos frágeis e verdades que nem o Copilot consegue auto-corrigir. Se já disseste “o prompt não funcionou, deve ser culpa do modelo”, lê por tua conta e risco. Lembras-te quando programar exigia pensar? Quando resolver um problema significava abrir o caderno, desenhar caixas e setas, discutir com a equipa e planear soluções? Pois… isso foi antes da era das LLMs.\nHoje o ritual é mais simples: abrir o ChatGPT, mandar um “faz-me um CRUD com testes e arquitetura limpa” e voilà. Código pronto, ego inflado, dopamina no teto.\nBem-vindo ao Dopamine Coding™, também conhecido como a cocaína digital do programador moderno. Barato, rápido, acessível e legal. Mas, como qualquer droga, o vício cobra um preço — e normalmente a conta chega quando o código vai para produção.\nO primeiro “pico” ninguém esquece A primeira dose é mágica. Estás cansado de escrever sempre as mesmas funções e decides experimentar a IA. Abres um chat, digitas algumas linhas e Enter e BOOM: centenas de linhas de código elegante, testes incluídos e nomes de variáveis que até parecem ter sido escolhidos por um poeta sênior.\nO teu cérebro inunda-se de dopamina. Sentes-te 10x mais produtivo. Convences-te de que finalmente atingiste o estado de “engenheiro iluminado”.\nAté acreditas que, se alguém te perguntasse numa entrevista “como funciona isso?”, terias uma resposta. (Spoiler: não terias.)\nA ressaca bate mais rápido do que um build falhado O paraíso dura até à primeira bad trip:\nO código não escala. A lógica de negócio está invertida. O endpoint responde mais devagar do que um estagiário na sexta-feira à tarde. E tu não sabes por onde começar porque — surpresa — nunca pensaste no problema.\nAgora entras em modo desespero:\n“Deve ser o modelo.” “Talvez seja a stack…” “Deve ser a IDE.” “A empresa devia era pagar o Copilot ou o Cursor.” “E se experimentar outra?” E lá vais tu, abrir novas tabs, exprimentar outro model: Claude. ChatGPT. Gemini. Qual bate mais forte?\nE se adicionares MCPs à mistura… esquece. É a versão “premium” do vício. Convence-te de que agora vai correr tudo bem — e no fim continuas no mesmo sítio: sem solução e com menos neurónios a funcionar.\nQuando a IA estraga mais do que ajuda O problema não é a ferramenta. O problema é o que deixas de fazer quando a tens à disposição: pensar. E é aí que começam os verdadeiros estragos:\nArquiteturas desastrosas: a IA sugere padrões que até fazem sentido… no mundo dela. Negócios incompreendidos: o código resolve um “como” que nunca devia ter sido resolvido. Bugs invisíveis: o código funciona, mas ninguém sabe porquê. Testes inúteis: a cobertura está a 100%, mas não cobre cenários de negócio reais. Overengineering: achas-te muito esperto por usar merdas que nunca tinhas visto — e que provavelmente ninguém vai entender — só porque a IA diz que são mais rápidas. A cereja no topo? Quando os testes gerados automaticamente passam todos, e mesmo assim o produto falha em produção. A cobertura está impecável — e o teu sistema também, desde que nunca seja usado por um humano real.\nUtilizo IA para resolver o que não merece o meu cérebro Apesar de tudo isto, continuo a usar IA todos os dias. A diferença é que não a trato como uma solução milagrosa, mas sim como um estagiário hiperativo que escreve rápido e não precisa de férias.\nEis alguns exemplos concretos de onde ela realmente me poupa tempo:\nTDD mais eficiente: eu defino os cenários e a IA trata da parte GREEN e REFACTOR (as vezes). Scripts auxiliares: migração de dados, transformações pontuais ou tarefas de manutenção. DevOps sem dores: comandos complexos no terminal ou pipelines de CI/CD que não quero decorar. Exploração de código legado: para entender rapidamente partes obscuras de sistemas antigos. Aprendizagem técnica: rever conceitos como concorrência em Go ou protocolos HTTP mais recentes. A regra é simples: eu penso, a IA executa. Nunca o contrário.\nA linha entre engenheiro e operador de prompts Se continuarmos a usar IA como substituto do raciocínio, daqui a uns anos não haverá engenheiros — só operadores de prompts a competir para ver quem escreve “o prompt mágico” mais rápido.\nA verdade é que a IA pode escrever código, mas não entende o negócio. Pode sugerir soluções, mas não percebe os trade-offs. Pode construir funcionalidades, mas não sabe porquê.\nO cérebro humano ainda é a melhor tecnologia que temos. E se o deixares enferrujar, nenhuma LLM o vai substituir.\nConclusão – A moral do vício digital A programação com IA é como um pacote de açúcar: doce no início, viciante no meio e com efeitos colaterais no fim. No início é tudo produtividade e euforia. Depois vêm as desculpas (“deve ser o modelo”, “devia mudar de stack”, “a empresa devia pagar o Copilot”). E, quando dás por ti, passaste mais tempo a afinar prompts do que a resolver problemas.\nA moral?\n👉 Pensa primeiro, pede ajuda depois. 👉 Faz perguntas melhores, em vez de prompts maiores. 👉 E se a IA for a droga… que o teu cérebro seja o traficante. Porque engenheiros resolvem problemas. O resto só recarrega tokens.\n","permalink":"http://localhost:1313/pt/posts/ai-e-programadores/","summary":"\u003ch1 id=\"a-nova-droga-da-programação-que-está-a-matar-engenheiros\"\u003eA Nova Droga da Programação Que Está a Matar Engenheiros\u003c/h1\u003e\n\u003chr\u003e\n\u003ch2 id=\"-este-texto-contém-níveis-perigosos-de-ironia-provocações-que-podem-ferir-egos-frágeis-e-verdades-que-nem-o-copilot-consegue-auto-corrigir-se-já-disseste-o-prompt-não-funcionou-deve-ser-culpa-do-modelo-lê-por-tua-conta-e-risco\"\u003e💊 Este texto contém níveis perigosos de ironia, provocações que podem ferir egos frágeis e verdades que nem o Copilot consegue auto-corrigir. Se já disseste “o prompt não funcionou, deve ser culpa do modelo”, lê por tua conta e risco.\u003c/h2\u003e\n\u003cp\u003eLembras-te quando programar exigia pensar? Quando resolver um problema significava abrir o caderno, desenhar caixas e setas, discutir com a equipa e planear soluções? Pois… isso foi antes da era das LLMs.\u003c/p\u003e","title":"Como a IA Está a Tornar os Programadores Mais Preguiçosos e Menos Engenheiros"},{"content":"A Nova Droga da Programação Que Está a Matar Engenheiros \u0026ndash;\n💊 Este texto contém níveis perigosos de ironia, provocações que podem ferir egos frágeis e verdades que nem o Copilot consegue auto-corrigir. Se já disseste “o prompt não funcionou, deve ser culpa do modelo”, lê por tua conta e risco.\n\u0026ndash;\nLembras-te quando programar exigia pensar? Quando resolver um problema significava abrir o caderno, desenhar caixas e setas, discutir com a equipa e planear soluções? Pois… isso foi antes da era das LLMs.\nHoje o ritual é mais simples: abrir o ChatGPT, mandar um “faz-me um CRUD com testes e arquitetura limpa” e voilà. Código pronto, ego inflado, dopamina no teto.\nBem-vindo ao Dopamine Coding™, também conhecido como a cocaína digital do programador moderno. Barato, rápido, acessível e legal. Mas, como qualquer droga, o vício cobra um preço — e normalmente a conta chega quando o código vai para produção.\nO primeiro “pico” ninguém esquece A primeira dose é mágica. Estás cansado de escrever sempre as mesmas funções e decides experimentar a IA. Abres um chat, digitas algumas linhas e Enter e BOOM: centenas de linhas de código elegante, testes incluídos e nomes de variáveis que até parecem ter sido escolhidos por um poeta sênior.\nO teu cérebro inunda-se de dopamina. Sentes-te 10x mais produtivo. Convences-te de que finalmente atingiste o estado de “engenheiro iluminado”.\nAté acreditas que, se alguém te perguntasse numa entrevista “como funciona isso?”, terias uma resposta. (Spoiler: não terias.)\nA ressaca bate mais rápido do que um build falhado O paraíso dura até à primeira bad trip:\nO código não escala. A lógica de negócio está invertida. O endpoint responde mais devagar do que um estagiário na sexta-feira à tarde. E tu não sabes por onde começar porque — surpresa — nunca pensaste no problema.\nAgora entras em modo desespero:\n“Deve ser o modelo.” “Talvez seja a stack…” “Deve ser a IDE.” “A empresa devia era pagar o Copilot ou o Cursor.” “E se experimentar outra?” E lá vais tu, abrir novas tabs, exprimentar outro model: Claude. ChatGPT. Gemini. Qual bate mais forte?\nE se adicionares MCPs à mistura… esquece. É a versão “premium” do vício. Convence-te de que agora vai correr tudo bem — e no fim continuas no mesmo sítio: sem solução e com menos neurónios a funcionar.\nQuando a IA estraga mais do que ajuda O problema não é a ferramenta. O problema é o que deixas de fazer quando a tens à disposição: pensar. E é aí que começam os verdadeiros estragos:\nArquiteturas desastrosas: a IA sugere padrões que até fazem sentido… no mundo dela. Negócios incompreendidos: o código resolve um “como” que nunca devia ter sido resolvido. Bugs invisíveis: o código funciona, mas ninguém sabe porquê. Testes inúteis: a cobertura está a 100%, mas não cobre cenários de negócio reais. Overengineering: achas-te muito esperto por usar merdas que nunca tinhas visto — e que provavelmente ninguém vai entender — só porque a IA diz que são mais rápidas. A cereja no topo? Quando os testes gerados automaticamente passam todos, e mesmo assim o produto falha em produção. A cobertura está impecável — e o teu sistema também, desde que nunca seja usado por um humano real.\nUtilizo IA para resolver o que não merece o meu cérebro Apesar de tudo isto, continuo a usar IA todos os dias. A diferença é que não a trato como uma solução milagrosa, mas sim como um estagiário hiperativo que escreve rápido e não precisa de férias.\nEis alguns exemplos concretos de onde ela realmente me poupa tempo:\nTDD mais eficiente: eu defino os cenários e a IA trata da parte GREEN e REFACTOR (as vezes). Scripts auxiliares: migração de dados, transformações pontuais ou tarefas de manutenção. DevOps sem dores: comandos complexos no terminal ou pipelines de CI/CD que não quero decorar. Exploração de código legado: para entender rapidamente partes obscuras de sistemas antigos. Aprendizagem técnica: rever conceitos como concorrência em Go ou protocolos HTTP mais recentes. A regra é simples: eu penso, a IA executa. Nunca o contrário.\nA linha entre engenheiro e operador de prompts Se continuarmos a usar IA como substituto do raciocínio, daqui a uns anos não haverá engenheiros — só operadores de prompts a competir para ver quem escreve “o prompt mágico” mais rápido.\nA verdade é que a IA pode escrever código, mas não entende o negócio. Pode sugerir soluções, mas não percebe os trade-offs. Pode construir funcionalidades, mas não sabe porquê.\nO cérebro humano ainda é a melhor tecnologia que temos. E se o deixares enferrujar, nenhuma LLM o vai substituir.\nConclusão – A moral do vício digital A programação com IA é como um pacote de açúcar: doce no início, viciante no meio e com efeitos colaterais no fim. No início é tudo produtividade e euforia. Depois vêm as desculpas (“deve ser o modelo”, “devia mudar de stack”, “a empresa devia pagar o Copilot”). E, quando dás por ti, passaste mais tempo a afinar prompts do que a resolver problemas.\nA moral?\n👉 Pensa primeiro, pede ajuda depois. 👉 Faz perguntas melhores, em vez de prompts maiores. 👉 E se a IA for a droga… que o teu cérebro seja o traficante. Porque engenheiros resolvem problemas. O resto só recarrega tokens.\n","permalink":"http://localhost:1313/pt/posts/ai-e-programadores/","summary":"\u003ch1 id=\"a-nova-droga-da-programação-que-está-a-matar-engenheiros\"\u003eA Nova Droga da Programação Que Está a Matar Engenheiros\u003c/h1\u003e\n\u003cp\u003e\u0026ndash;\u003c/p\u003e\n\u003cp\u003e💊 Este texto contém níveis perigosos de ironia, provocações que podem ferir egos frágeis e verdades que nem o Copilot consegue auto-corrigir. Se já disseste “o prompt não funcionou, deve ser culpa do modelo”, lê por tua conta e risco.\u003c/p\u003e\n\u003cp\u003e\u0026ndash;\u003c/p\u003e\n\u003cp\u003eLembras-te quando programar exigia pensar? Quando resolver um problema significava abrir o caderno, desenhar caixas e setas, discutir com a equipa e planear soluções? Pois… isso foi antes da era das LLMs.\u003c/p\u003e","title":"Como a IA Está a Tornar os Programadores Mais Preguiçosos e Menos Engenheiros"},{"content":"A Nova Droga da Programação Que Está a Matar Engenheiros 💊 Este texto contém níveis perigosos de ironia, provocações que podem ferir egos frágeis e verdades que nem o Copilot consegue auto-corrigir. Se já disseste “o prompt não funcionou, deve ser culpa do modelo”, lê por tua conta e risco.\nLembras-te quando programar exigia pensar? Quando resolver um problema significava abrir o caderno, desenhar caixas e setas, discutir com a equipa e planear soluções? Pois… isso foi antes da era das LLMs.\nHoje o ritual é mais simples: abrir o ChatGPT, mandar um “faz-me um CRUD com testes e arquitetura limpa” e voilà. Código pronto, ego inflado, dopamina no teto.\nBem-vindo ao Dopamine Coding™, também conhecido como a cocaína digital do programador moderno. Barato, rápido, acessível e legal. Mas, como qualquer droga, o vício cobra um preço — e normalmente a conta chega quando o código vai para produção.\nO primeiro “pico” ninguém esquece A primeira dose é mágica. Estás cansado de escrever sempre as mesmas funções e decides experimentar a IA. Abres um chat, digitas algumas linhas e Enter e BOOM: centenas de linhas de código elegante, testes incluídos e nomes de variáveis que até parecem ter sido escolhidos por um poeta sênior.\nO teu cérebro inunda-se de dopamina. Sentes-te 10x mais produtivo. Convences-te de que finalmente atingiste o estado de “engenheiro iluminado”.\nAté acreditas que, se alguém te perguntasse numa entrevista “como funciona isso?”, terias uma resposta. (Spoiler: não terias.)\nA ressaca bate mais rápido do que um build falhado O paraíso dura até à primeira bad trip:\nO código não escala. A lógica de negócio está invertida. O endpoint responde mais devagar do que um estagiário na sexta-feira à tarde. E tu não sabes por onde começar porque — surpresa — nunca pensaste no problema.\nAgora entras em modo desespero:\n“Deve ser o modelo.” “Talvez seja a stack…” “Deve ser a IDE.” “A empresa devia era pagar o Copilot ou o Cursor.” “E se experimentar outra?” E lá vais tu, abrir novas tabs, exprimentar outro model: Claude. ChatGPT. Gemini. Qual bate mais forte?\nE se adicionares MCPs à mistura… esquece. É a versão “premium” do vício. Convence-te de que agora vai correr tudo bem — e no fim continuas no mesmo sítio: sem solução e com menos neurónios a funcionar.\nQuando a IA estraga mais do que ajuda O problema não é a ferramenta. O problema é o que deixas de fazer quando a tens à disposição: pensar. E é aí que começam os verdadeiros estragos:\nArquiteturas desastrosas: a IA sugere padrões que até fazem sentido… no mundo dela. Negócios incompreendidos: o código resolve um “como” que nunca devia ter sido resolvido. Bugs invisíveis: o código funciona, mas ninguém sabe porquê. Testes inúteis: a cobertura está a 100%, mas não cobre cenários de negócio reais. Overengineering: achas-te muito esperto por usar merdas que nunca tinhas visto — e que provavelmente ninguém vai entender — só porque a IA diz que são mais rápidas. A cereja no topo? Quando os testes gerados automaticamente passam todos, e mesmo assim o produto falha em produção. A cobertura está impecável — e o teu sistema também, desde que nunca seja usado por um humano real.\nUtilizo IA para resolver o que não merece o meu cérebro Apesar de tudo isto, continuo a usar IA todos os dias. A diferença é que não a trato como uma solução milagrosa, mas sim como um estagiário hiperativo que escreve rápido e não precisa de férias.\nEis alguns exemplos concretos de onde ela realmente me poupa tempo:\nTDD mais eficiente: eu defino os cenários e a IA trata da parte GREEN e REFACTOR (as vezes). Scripts auxiliares: migração de dados, transformações pontuais ou tarefas de manutenção. DevOps sem dores: comandos complexos no terminal ou pipelines de CI/CD que não quero decorar. Exploração de código legado: para entender rapidamente partes obscuras de sistemas antigos. Aprendizagem técnica: rever conceitos como concorrência em Go ou protocolos HTTP mais recentes. A regra é simples: eu penso, a IA executa. Nunca o contrário.\nA linha entre engenheiro e operador de prompts Se continuarmos a usar IA como substituto do raciocínio, daqui a uns anos não haverá engenheiros — só operadores de prompts a competir para ver quem escreve “o prompt mágico” mais rápido.\nA verdade é que a IA pode escrever código, mas não entende o negócio. Pode sugerir soluções, mas não percebe os trade-offs. Pode construir funcionalidades, mas não sabe porquê.\nO cérebro humano ainda é a melhor tecnologia que temos. E se o deixares enferrujar, nenhuma LLM o vai substituir.\nConclusão – A moral do vício digital A programação com IA é como um pacote de açúcar: doce no início, viciante no meio e com efeitos colaterais no fim. No início é tudo produtividade e euforia. Depois vêm as desculpas (“deve ser o modelo”, “devia mudar de stack”, “a empresa devia pagar o Copilot”). E, quando dás por ti, passaste mais tempo a afinar prompts do que a resolver problemas.\nA moral?\n👉 Pensa primeiro, pede ajuda depois. 👉 Faz perguntas melhores, em vez de prompts maiores. 👉 E se a IA for a droga… que o teu cérebro seja o traficante. Porque engenheiros resolvem problemas. O resto só recarrega tokens.\n","permalink":"http://localhost:1313/pt/posts/ai-e-programadores/","summary":"\u003ch1 id=\"a-nova-droga-da-programação-que-está-a-matar-engenheiros\"\u003eA Nova Droga da Programação Que Está a Matar Engenheiros\u003c/h1\u003e\n\u003chr\u003e\n\u003cp\u003e💊 Este texto contém níveis perigosos de ironia, provocações que podem ferir egos frágeis e verdades que nem o Copilot consegue auto-corrigir. Se já disseste “o prompt não funcionou, deve ser culpa do modelo”, lê por tua conta e risco.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eLembras-te quando programar exigia pensar? Quando resolver um problema significava abrir o caderno, desenhar caixas e setas, discutir com a equipa e planear soluções? Pois… isso foi antes da era das LLMs.\u003c/p\u003e","title":"Como a IA Está a Tornar os Programadores Mais Preguiçosos e Menos Engenheiros"},{"content":"A Nova Droga da Programação Que Está a Matar Engenheiros 💊 Este texto contém níveis perigosos de ironia, provocações que podem ferir egos frágeis e verdades que nem o Copilot consegue auto-corrigir. Se já disseste “o prompt não funcionou, deve ser culpa do modelo”, lê por tua conta e risco.\nLembras-te quando programar exigia pensar? Quando resolver um problema significava abrir o caderno, desenhar caixas e setas, discutir com a equipa e planear soluções? Pois… isso foi antes da era das LLMs.\nHoje o ritual é mais simples: abrir o ChatGPT, mandar um “faz-me um CRUD com testes e arquitetura limpa” e voilà. Código pronto, ego inflado, dopamina no teto.\nBem-vindo ao Dopamine Coding, também conhecido como a cocaína digital do programador moderno. Barato, rápido, acessível e legal. Mas, como qualquer droga, o vício cobra um preço — e normalmente a conta chega quando o código vai para produção.\nO primeiro “pico” ninguém esquece A primeira dose é mágica. Estás cansado de escrever sempre as mesmas funções e decides experimentar a IA. Abres um chat, digitas algumas linhas e Enter e BOOM: centenas de linhas de código elegante, testes incluídos e nomes de variáveis que até parecem ter sido escolhidos por um poeta sênior.\nO teu cérebro inunda-se de dopamina. Sentes-te 10x mais produtivo. Convences-te de que finalmente atingiste o estado de “engenheiro iluminado”.\nAté acreditas que, se alguém te perguntasse numa entrevista “como funciona isso?”, terias uma resposta. (Spoiler: não terias.)\nA ressaca bate mais rápido do que um build falhado O paraíso dura até à primeira bad trip:\nO código não escala. A lógica de negócio está invertida. O endpoint responde mais devagar do que um estagiário na sexta-feira à tarde. E tu não sabes por onde começar porque — surpresa — nunca pensaste no problema.\nAgora entras em modo desespero:\n“Deve ser o modelo.” “Talvez seja a stack…” “Deve ser a IDE.” “A empresa devia era pagar o Copilot ou o Cursor.” “E se experimentar outra?” E lá vais tu, abrir novas tabs, exprimentar outro model: Claude. ChatGPT. Gemini. Qual bate mais forte?\nE se adicionares MCPs à mistura… esquece. É a versão “premium” do vício. Convence-te de que agora vai correr tudo bem — e no fim continuas no mesmo sítio: sem solução e com menos neurónios a funcionar.\nQuando a IA estraga mais do que ajuda O problema não é a ferramenta. O problema é o que deixas de fazer quando a tens à disposição: pensar. E é aí que começam os verdadeiros estragos:\nArquiteturas desastrosas: a IA sugere padrões que até fazem sentido… no mundo dela. Negócios incompreendidos: o código resolve um “como” que nunca devia ter sido resolvido. Bugs invisíveis: o código funciona, mas ninguém sabe porquê. Testes inúteis: a cobertura está a 100%, mas não cobre cenários de negócio reais. Overengineering: achas-te muito esperto por usar merdas que nunca tinhas visto — e que provavelmente ninguém vai entender — só porque a IA diz que são mais rápidas. A cereja no topo? Quando os testes gerados automaticamente passam todos, e mesmo assim o produto falha em produção. A cobertura está impecável — e o teu sistema também, desde que nunca seja usado por um humano real.\nUtilizo IA para resolver o que não merece o meu cérebro Apesar de tudo isto, continuo a usar IA todos os dias. A diferença é que não a trato como uma solução milagrosa, mas sim como um estagiário hiperativo que escreve rápido e não precisa de férias.\nEis alguns exemplos concretos de onde ela realmente me poupa tempo:\nTDD mais eficiente: eu defino os cenários e a IA trata da parte GREEN e REFACTOR (as vezes). Scripts auxiliares: migração de dados, transformações pontuais ou tarefas de manutenção. DevOps sem dores: comandos complexos no terminal ou pipelines de CI/CD que não quero decorar. Exploração de código legado: para entender rapidamente partes obscuras de sistemas antigos. Aprendizagem técnica: rever conceitos como concorrência em Go ou protocolos HTTP mais recentes. A regra é simples: eu penso, a IA executa. Nunca o contrário.\nA linha entre engenheiro e operador de prompts Se continuarmos a usar IA como substituto do raciocínio, daqui a uns anos não haverá engenheiros — só operadores de prompts a competir para ver quem escreve “o prompt mágico” mais rápido.\nA verdade é que a IA pode escrever código, mas não entende o negócio. Pode sugerir soluções, mas não percebe os trade-offs. Pode construir funcionalidades, mas não sabe porquê.\nO cérebro humano ainda é a melhor tecnologia que temos. E se o deixares enferrujar, nenhuma LLM o vai substituir.\nConclusão – A moral do vício digital A programação com IA é como um pacote de açúcar: doce no início, viciante no meio e com efeitos colaterais no fim. No início é tudo produtividade e euforia. Depois vêm as desculpas (“deve ser o modelo”, “devia mudar de stack”, “a empresa devia pagar o Copilot”). E, quando dás por ti, passaste mais tempo a afinar prompts do que a resolver problemas.\nA moral?\n👉 Pensa primeiro, pede ajuda depois. 👉 Faz perguntas melhores, em vez de prompts maiores. 👉 E se a IA for a droga… que o teu cérebro seja o traficante. Porque engenheiros resolvem problemas. O resto só recarrega tokens.\n","permalink":"http://localhost:1313/pt/posts/ai-e-programadores/","summary":"\u003ch1 id=\"a-nova-droga-da-programação-que-está-a-matar-engenheiros\"\u003eA Nova Droga da Programação Que Está a Matar Engenheiros\u003c/h1\u003e\n\u003chr\u003e\n\u003cp\u003e💊 Este texto contém níveis perigosos de ironia, provocações que podem ferir egos frágeis e verdades que nem o Copilot consegue auto-corrigir. Se já disseste “o prompt não funcionou, deve ser culpa do modelo”, lê por tua conta e risco.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eLembras-te quando programar exigia pensar? Quando resolver um problema significava abrir o caderno, desenhar caixas e setas, discutir com a equipa e planear soluções? Pois… isso foi antes da era das LLMs.\u003c/p\u003e","title":"Como a IA Está a Tornar os Programadores Mais Preguiçosos e Menos Engenheiros"},{"content":"A Nova Droga da Programação Que Está a Matar Engenheiros 💊 Este texto contém níveis perigosos de ironia, provocações que podem ferir egos frágeis e verdades que nem o Copilot consegue auto-corrigir. Se já disseste “o prompt não funcionou, deve ser culpa do modelo”, lê por tua conta e risco.\nLembras-te quando programar exigia pensar? Quando resolver um problema significava abrir o caderno, desenhar caixas e setas, discutir com a equipa e planear soluções? Pois… isso foi antes da era das LLMs.\nHoje o ritual é mais simples: abrir o ChatGPT, mandar um “faz-me um CRUD com testes e arquitetura limpa” e voilà. Código pronto, ego inflado, dopamina no teto.\nBem-vindo ao Dopamine Coding, também conhecido como a cocaína digital do programador moderno. Barato, rápido, acessível e legal. Mas, como qualquer droga, o vício cobra um preço — e normalmente a conta chega quando o código vai para produção.\nO primeiro “pico” ninguém esquece A primeira dose é mágica. Estás cansado de escrever sempre as mesmas funções e decides experimentar a IA. Abres um chat, digitas algumas linhas e Enter e BOOM: centenas de linhas de código elegante, testes incluídos e nomes de variáveis que até parecem ter sido escolhidos por um poeta sênior.\nO teu cérebro inunda-se de dopamina. Sentes-te 10x mais produtivo. Convences-te de que finalmente atingiste o estado de “engenheiro iluminado”.\nAté acreditas que, se alguém te perguntasse numa entrevista “como funciona isso?”, terias uma resposta. (Spoiler: não terias.)\nA ressaca bate mais rápido do que um build falhado O paraíso dura até à primeira bad trip:\nO código não escala. A lógica de negócio está invertida. O endpoint responde mais devagar do que um estagiário na sexta-feira à tarde. E tu não sabes por onde começar porque — surpresa — nunca pensaste no problema.\nAgora entras em modo desespero:\n“Deve ser o modelo.” “Talvez seja a stack…” “Deve ser a IDE.” “A empresa devia era pagar o Copilot ou o Cursor.” “E se experimentar outra?” E lá vais tu, abrir novas tabs, exprimentar outro model: Claude. ChatGPT. Gemini. Qual bate mais forte?\nE se adicionares MCPs à mistura… esquece. É a versão “premium” do vício. Convence-te de que agora vai correr tudo bem — e no fim continuas no mesmo sítio: sem solução e com menos neurónios a funcionar.\nQuando a IA estraga mais do que ajuda O problema não é a ferramenta. O problema é o que deixas de fazer quando a tens à disposição: pensar. E é aí que começam os verdadeiros estragos:\nArquiteturas desastrosas: a IA sugere padrões que até fazem sentido… no mundo dela. Negócios incompreendidos: o código resolve um “como” que nunca devia ter sido resolvido. Bugs invisíveis: o código funciona, mas ninguém sabe porquê. Testes inúteis: a cobertura está a 100%, mas não cobre cenários de negócio reais. Overengineering: achas-te muito esperto por usar merdas que nunca tinhas visto — e que provavelmente ninguém vai entender — só porque a IA diz que são mais rápidas. A cereja no topo? Quando os testes gerados automaticamente passam todos, e mesmo assim o produto falha em produção. A cobertura está impecável — e o teu sistema também, desde que nunca seja usado por um humano real.\nUtilizo IA para resolver o que não merece o meu cérebro Apesar de tudo isto, continuo a usar IA todos os dias. A diferença é que não a trato como uma solução milagrosa, mas sim como um estagiário hiperativo que escreve rápido e não precisa de férias.\nEis alguns exemplos concretos de onde ela realmente me poupa tempo:\nTDD mais eficiente: eu defino os cenários e a IA trata da parte GREEN e REFACTOR (as vezes). Scripts auxiliares: migração de dados, transformações pontuais ou tarefas de manutenção. DevOps sem dores: comandos complexos no terminal ou pipelines de CI/CD que não quero decorar. Exploração de código legado: para entender rapidamente partes obscuras de sistemas antigos. Aprendizagem técnica: rever conceitos como concorrência em Go ou protocolos HTTP mais recentes. A regra é simples: eu penso, a IA executa. Nunca o contrário.\nA linha entre engenheiro e operador de prompts Se continuarmos a usar IA como substituto do raciocínio, daqui a uns anos não haverá engenheiros — só operadores de prompts a competir para ver quem escreve “o prompt mágico” mais rápido.\nA verdade é que a IA pode escrever código, mas não entende o negócio. Pode sugerir soluções, mas não percebe os trade-offs. Pode construir funcionalidades, mas não sabe porquê.\nO cérebro humano ainda é a melhor tecnologia que temos. E se o deixares enferrujar, nenhuma LLM o vai substituir.\nConclusão – A moral do vício digital A programação com IA é como um pacote de açúcar: doce no início, viciante no meio e com efeitos colaterais no fim. No início é tudo produtividade e euforia. Depois vêm as desculpas (“deve ser o modelo”, “devia mudar de stack”, “a empresa devia pagar o Copilot”). E, quando dás por ti, passaste mais tempo a afinar prompts do que a resolver problemas.\nA moral?\n👉 Pensa primeiro, pede ajuda depois. 👉 Faz perguntas melhores, em vez de prompts maiores. 👉 E se a IA for a droga… que o teu cérebro seja o traficante. Porque engenheiros resolvem problemas. O resto só recarrega tokens.\n","permalink":"http://localhost:1313/pt/posts/ai-e-programadores/","summary":"\u003ch1 id=\"a-nova-droga-da-programação-que-está-a-matar-engenheiros\"\u003eA Nova Droga da Programação Que Está a Matar Engenheiros\u003c/h1\u003e\n\u003chr\u003e\n\u003cp\u003e💊 Este texto contém níveis perigosos de ironia, provocações que podem ferir egos frágeis e verdades que nem o Copilot consegue auto-corrigir. Se já disseste “o prompt não funcionou, deve ser culpa do modelo”, lê por tua conta e risco.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eLembras-te quando programar exigia pensar? Quando resolver um problema significava abrir o caderno, desenhar caixas e setas, discutir com a equipa e planear soluções? Pois… isso foi antes da era das LLMs.\u003c/p\u003e","title":"Como a IA Está a Tornar os Programadores Mais Preguiçosos e Menos Engenheiros"},{"content":"A Nova Droga da Programação Que Está a Matar Engenheiros 💊 Este texto contém níveis perigosos de ironia, provocações que podem ferir egos frágeis e verdades que nem o Copilot consegue auto-corrigir. Se já disseste “o prompt não funcionou, deve ser culpa do modelo”, lê por tua conta e risco.\nLembras-te quando programar exigia pensar? Quando resolver um problema significava abrir o caderno, desenhar caixas e setas, discutir com a equipa e planear soluções? Pois… isso foi antes da era das LLMs.\nHoje o ritual é mais simples: abrir o ChatGPT, mandar um “faz-me um CRUD com testes e clean arch\u0026hellip;” e voilà. Código pronto, ego inflado, dopamina no teto.\nBem-vindo ao Dopamine Coding, também conhecido como a cocaína digital do programador moderno. Barato, rápido, acessível e legal. Mas, como qualquer droga, o vício cobra um preço — e normalmente a conta chega quando o código vai para produção.\nO primeiro “pico” ninguém esquece A primeira dose é mágica. Estás cansado de escrever sempre as mesmas funções e decides experimentar a IA. Abres um chat, digitas algumas linhas e Enter e BOOM: centenas de linhas de código elegante, testes incluídos e nomes de variáveis que até parecem ter sido escolhidos por um poeta sênior.\nO teu cérebro inunda-se de dopamina. Sentes-te 10x mais produtivo. Convences-te de que finalmente atingiste o estado de “engenheiro iluminado”.\nAté acreditas que, se alguém te perguntasse numa entrevista “como funciona isso?”, terias uma resposta. (Spoiler: não terias.)\nA ressaca bate mais rápido do que um build falhado O paraíso dura até à primeira bad trip:\nO código não escala. A lógica de negócio está invertida. O endpoint responde mais devagar do que um estagiário na sexta-feira à tarde. E tu não sabes por onde começar porque — surpresa — nunca pensaste no problema.\nAgora entras em modo desespero:\n“Deve ser o modelo.” “Talvez seja a stack…” “Deve ser a IDE.” “A empresa devia era pagar o Copilot ou o Cursor.” “E se experimentar outra?” E lá vais tu, abrir novas tabs, exprimentar outro model: Claude. ChatGPT. Gemini. Qual bate mais forte?\nE se adicionares MCPs à mistura… esquece. É a versão “premium” do vício. Convence-te de que agora vai correr tudo bem — e no fim continuas no mesmo sítio: sem solução e com menos neurónios a funcionar.\nQuando a IA estraga mais do que ajuda O problema não é a ferramenta. O problema é o que deixas de fazer quando a tens à disposição: pensar. E é aí que começam os verdadeiros estragos:\nArquiteturas desastrosas: a IA sugere padrões que até fazem sentido… no mundo dela. Negócios incompreendidos: o código resolve um “como” que nunca devia ter sido resolvido. Bugs invisíveis: o código funciona, mas ninguém sabe porquê. Testes inúteis: a cobertura está a 100%, mas não cobre cenários de negócio reais. Overengineering: achas-te muito esperto por usar merdas que nunca tinhas visto — e que provavelmente ninguém vai entender — só porque a IA diz que são mais rápidas. A cereja no topo? Quando os testes gerados automaticamente passam todos, e mesmo assim o produto falha em produção. A cobertura está impecável — e o teu sistema também, desde que nunca seja usado por um humano real.\nUtilizo IA para resolver o que não merece o meu cérebro Apesar de tudo isto, continuo a usar IA todos os dias. A diferença é que não a trato como uma solução milagrosa, mas sim como um estagiário hiperativo que escreve rápido e não precisa de férias.\nEis alguns exemplos concretos de onde ela realmente me poupa tempo:\nTDD mais eficiente: eu defino os cenários e a IA trata da parte GREEN e REFACTOR (as vezes). Scripts auxiliares: migração de dados, transformações pontuais ou tarefas de manutenção. DevOps sem dores: comandos complexos no terminal ou pipelines de CI/CD que não quero decorar. Exploração de código legado: para entender rapidamente partes obscuras de sistemas antigos. Aprendizagem técnica: rever conceitos como concorrência em Go ou protocolos HTTP mais recentes. A regra é simples: eu penso, a IA executa. Nunca o contrário.\nA linha entre engenheiro e operador de prompts Se continuarmos a usar IA como substituto do raciocínio, daqui a uns anos não haverá engenheiros — só operadores de prompts a competir para ver quem escreve “o prompt mágico” mais rápido.\nA verdade é que a IA pode escrever código, mas não entende o negócio. Pode sugerir soluções, mas não percebe os trade-offs. Pode construir funcionalidades, mas não sabe porquê.\nO cérebro humano ainda é a melhor tecnologia que temos. E se o deixares enferrujar, nenhuma LLM o vai substituir.\nConclusão – A moral do vício digital A programação com IA é como um pacote de açúcar: doce no início, viciante no meio e com efeitos colaterais no fim. No início é tudo produtividade e euforia. Depois vêm as desculpas (“deve ser o modelo”, “devia mudar de stack”, “a empresa devia pagar o Copilot”). E, quando dás por ti, passaste mais tempo a afinar prompts do que a resolver problemas.\nA moral?\n👉 Pensa primeiro, pede ajuda depois. 👉 Faz perguntas melhores, em vez de prompts maiores. 👉 E se a IA for a droga… que o teu cérebro seja o traficante. Porque engenheiros resolvem problemas. O resto só recarrega tokens.\n","permalink":"http://localhost:1313/pt/posts/ai-e-programadores/","summary":"\u003ch1 id=\"a-nova-droga-da-programação-que-está-a-matar-engenheiros\"\u003eA Nova Droga da Programação Que Está a Matar Engenheiros\u003c/h1\u003e\n\u003chr\u003e\n\u003cp\u003e💊 Este texto contém níveis perigosos de ironia, provocações que podem ferir egos frágeis e verdades que nem o Copilot consegue auto-corrigir. Se já disseste “o prompt não funcionou, deve ser culpa do modelo”, lê por tua conta e risco.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eLembras-te quando programar exigia pensar? Quando resolver um problema significava abrir o caderno, desenhar caixas e setas, discutir com a equipa e planear soluções? Pois… isso foi antes da era das LLMs.\u003c/p\u003e","title":"Como a IA Está a Tornar os Programadores Mais Preguiçosos e Menos Engenheiros"}]